#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Create the MT19937 stream cipher and break it
#
# You can create a trivial stream cipher out of any PRNG; use it to generate
# a sequence of 8 bit outputs and call those outputs a keystream. XOR each
# byte of plaintext with each successive byte of keystream.
#
# Write the function that does this for MT19937 using a 16-bit seed. Verify
# that you can encrypt and decrypt properly. This code should look similar to
# your CTR code.
#
# Use your function to encrypt a known plaintext (say, 14 consecutive 'A'
# characters) prefixed by a random number of random characters.
#
# From the ciphertext, recover the "key" (the 16 bit seed).
#
# Use the same idea to generate a random "password reset token" using MT19937
# seeded from the current time.
#
# Write a function to check if any given password token is actually the
# product of an MT19937 PRNG seeded with the current time.
#
import random
import sys
import time

sys.path.append("..")

from util.mt19937 import MT19337


def mt19337_cipher(in_bytes, seed):
    rng, out_bytes = MT19337(seed), bytearray()

    for i in range(0, len(in_bytes), 4):
        keystream, instream = rng.rand().to_bytes(4, "big"), in_bytes[i : i + 4]
        out_bytes.extend(kb ^ ib for kb, ib in zip(keystream, instream))

    return bytes(out_bytes)


def gen_bytes(n):
    return random.getrandbits(n * 8).to_bytes(n, "big")


def make_mt19337_ctext(ptext):
    prefix = gen_bytes(random.getrandbits(7))
    return mt19337_cipher(prefix + ptext, random.getrandbits(16))


def recover_mt19337_seed(ptext=b"A" * 14):
    ctext = make_mt19337_ctext(ptext)
    plen = len(ctext) - len(ptext)

    for seed in range(1 << 16):
        if mt19337_cipher(ctext, seed)[plen:] == ptext:
            return seed


def make_token(username, seed):
    plen, slen = random.getrandbits(7), random.getrandbits(7)
    ptext = gen_bytes(plen) + username + gen_bytes(slen)
    return mt19337_cipher(ptext, seed)


def is_mt19337_ciphered(token, known_text):
    utime = int(time.time())
    start, stop = utime - 3600, utime + 60
    return any(
        known_text in mt19337_cipher(token, check_time)
        for check_time in range(start, stop)
    )


def main():
    print("Testing the MT19337 stream cipher.")
    print("Enter a plaintext to encrypt with it, using a random 32-bit seed.")
    print()

    ptext, seed = b"", random.getrandbits(32)
    while not ptext:
        ptext = input("Plaintext: ").encode()
    ctext = mt19337_cipher(ptext, seed)
    print()

    print("Ciphertext:", ctext)
    print("Deciphered plaintext:", mt19337_cipher(ctext, seed).decode())
    print()

    print("Recovering a random 16-bit seed, please wait.")
    print("Recovered seed:", recover_mt19337_seed())
    print()

    print("Generating a 'password reset token'.")
    print("Enter a username and an optional positive integer seed.")
    print("The default seed is the current UNIX time.")
    print()

    username = b""
    while not username:
        username = input("Username:  ").encode()

    seed = input("Seed:      ")
    try:
        seed = abs(int(seed))
    except ValueError:
        seed = int(time.time())

    print()

    token = make_token(username, seed)
    print(f"A token was generated using a seed of {seed}.")

    check = is_mt19337_ciphered(token, username)
    print("Token was generated by current-time-seeded MT19337 PRNG:", check)
    if not check:
        print("(You entered your own seed, so this is expected.)")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass


# Output:
#
#   Testing the MT19337 stream cipher.
#   Enter a plaintext to encrypt with it, using a random 32-bit seed.
#
#   Plaintext: Jack and Jill went up the hill
#
#   Ciphertext: b"\xec\xa6\x1a\xad,\xa0\xc6'r\x047\x16\xed0\xa5\x8dg {\x16^n=\xe1%\x85I\xbf>B"
#   Deciphered plaintext: Jack and Jill went up the hill
#
#   Recovering a random 16-bit seed, please wait.
#   Recovered seed: 41305
#
#   Generating a 'password reset token'.
#   Enter a username and an optional positive integer seed.
#   The default seed is the current UNIX time.
#
#   Username:  rumpelstiltzchen
#   Seed:      1223334444
#
#   A token was generated using a seed of 1223334444.
#   Token was generated by current-time-seeded MT19337 PRNG: False
#   (You entered a non-default seed, so this is expected.)
#
